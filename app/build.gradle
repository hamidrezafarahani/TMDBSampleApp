plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.example.tmdbsampleapp'
    compileSdk 33

    def properties = getProperties("${rootDir}/local.properties")

    defaultConfig {
        applicationId "com.example.tmdbsampleapp"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        buildConfigField("String", "API_KEY", "\"${properties.getProperty("tmdb.api_key")}\"")
        buildConfigField("String", "TOKEN", "\"${properties.getProperty("tmdb.token")}\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"
                ]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
        // Or shorter:
//        jvmToolchain(<MAJOR_JDK_VERSION>)
        // For example:
//        jvmToolchain(17)
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }
}

static Properties getProperties(String file) {
    def properties = new Properties()
    def propertiesFile = new File(file)
    if (propertiesFile instanceof File) {
        properties.load(new FileInputStream(propertiesFile))
    } else {
        throw new Exception("file not found or not instance of properties faile.")
    }
    return properties
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    def coroutines_version = "1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    def fragment_ktx_version = "1.5.7"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"

    def lifecycle_version = "2.6.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    def nav_version = "2.5.3"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    def paging_version = "3.1.1"
    implementation "androidx.paging:paging-runtime:$paging_version"

    def hilt_version = "2.46"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    def room_version = "2.4.3"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-paging:$room_version"


    def gson_version = "2.10.1"
    implementation "com.google.code.gson:gson:$gson_version"

    def okhttp_version = "4.10.0"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    def glide_version = "4.15.1"
    implementation "com.github.bumptech.glide:glide:$glide_version"

    def shimmer_version = "0.5.0"
    implementation "com.facebook.shimmer:shimmer:$shimmer_version"

    def timber_version = "5.0.1"
    implementation "com.jakewharton.timber:timber:$timber_version"
}

kapt {
    correctErrorTypes true
}